
import Foundation

import GRDB
import Mapbox


class PersistableGeopoint : Record {

    // thrown when a point can't be initialized
    enum PointInitError : Error { case error }

    // an id autogenerated by the app's db
    var id: Int64 = 0

    // the geographical latitude (WGS 84)
    var latitude: Double = 0

    // the geographical longitude (WGS 84)
    var longitude: Double = 0

    // the tour's id, if this is part of a tour track, else null (e.g. point in area)
    var tour: Tour?


    /// Allow blank initialization
    public override init() {
        super.init()
    }

    public convenience init(coords: [Double]) throws {
        self.init()
        guard coords.count == 2 else {
            throw PointInitError.error
        }
        self.latitude = coords[0]
        self.longitude = coords[1]
    }

    func toCoordinate() -> CLLocationCoordinate2D {
        return CLLocationCoordinate2D(latitude: self.latitude, longitude: self.longitude)
    }

    // MARK: Record interface

    /// The table name
    override public class var databaseTableName: String {
        return "geopoint"
    }

    /// Initialize from a database row
    public required init(row: Row) {
        id = row["id"]
        latitude = row["latitude"]
        longitude = row["longitude"]
        super.init(row: row)
    }

    /// The values persisted in the database
    override public func encode(to container: inout PersistenceContainer) {
        container["latitude"] = latitude
        container["longitude"] = longitude
        container["tour_id"] = tour?.id
    }

    /// Update id after a successful insert
    override public func didInsert(with rowID: Int64, for column: String?) {
        id = rowID
    }
    
}
